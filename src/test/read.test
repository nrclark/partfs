#!/bin/bash
SRCDIR=$(dirname "$0")

source "$SRCDIR/taplib.sh"

SOURCE_FILE="source.txt"
WORK_FILE="work.txt"
MOUNT_FILE="mount"
UNMOUNT="fusermount -zu"

cleanup() {
    (${UNMOUNT} "${MOUNT_FILE}" || true) 1>/dev/null 2>&1
    rm -rf "${SOURCE_FILE}"
    rm -rf "${WORK_FILE}"
    rm -rf "${MOUNT_FILE}"
}

make_files () {
    local size="$1"

    set -euo pipefail
    cleanup

    touch "${MOUNT_FILE}"
    touch "${SOURCE_FILE}"

    if [ "${size}" != 0 ]; then
        dd if=/dev/urandom of="${SOURCE_FILE}" bs=${size} count=1 status=none
    fi

    sync
    cp ${SOURCE_FILE} "${WORK_FILE}"
}

trap cleanup INT TERM EXIT

assert_ok "Testing a whole-file mount" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"

    EXPECTED="\$("$SRCDIR/reader.py" "${SOURCE_FILE}" -x)"
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -x)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a partial mount to EOF" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10

    EXPECTED="\$("$SRCDIR/reader.py" "${SOURCE_FILE}" -x -o 10)"
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -x)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a partial mount to middle-of-file" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=10

    EXPECTED="\$("$SRCDIR/reader.py" "${SOURCE_FILE}" -x -o 10 -c 10)"
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -x)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a read from middle to EOF" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=10

    EXPECTED="\$("$SRCDIR/reader.py" "${SOURCE_FILE}" -x -o 18 -c 2)"
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -x -o 8)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a read from middle to beyond EOF" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=10

    EXPECTED="\$("$SRCDIR/reader.py" "${SOURCE_FILE}" -x -o 18 -c 2)"
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -i -x -o 8 -c 201)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a read from beyond EOF" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=10

    EXPECTED=""
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -i -x -o 34 -c 201)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing a zero-length read" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"

    EXPECTED=""
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -ix -o8 -c0)"

    test "\${EXPECTED}" = "\${ACTUAL}"
END

assert_ok "Testing reads from a zero-length mount" << END
    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=0

    EXPECTED=""
    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -ix -c0)"
    test "\${EXPECTED}" = "\${ACTUAL}"

    ACTUAL="\$("$SRCDIR/reader.py" "${MOUNT_FILE}" -ix -c8)"
    test "\${EXPECTED}" = "\${ACTUAL}"
END
