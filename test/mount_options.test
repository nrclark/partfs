#!/bin/bash

source taplib.sh

SOURCE_FILE="source.txt"
WORK_FILE="work.txt"
MOUNT_FILE="mount"
UNMOUNT="fusermount -zu"

cleanup() {
    (${UNMOUNT} "${MOUNT_FILE}" || true) 1>/dev/null 2>&1
    rm -rf "${SOURCE_FILE}"
    rm -rf "${WORK_FILE}"
    rm -rf "${MOUNT_FILE}"
}

trap cleanup INT TERM EXIT

make_files () {
    local size="$1"

    set -euo pipefail
    cleanup

    touch "${MOUNT_FILE}"
    touch "${SOURCE_FILE}"
    chmod 0644 "${SOURCE_FILE}"

    if [ "${size}" != 0 ]; then
        dd if=/dev/urandom of="${SOURCE_FILE}" bs=${size} count=1 status=none
    fi

    sync
    cp ${SOURCE_FILE} "${WORK_FILE}"
}

validate_size() {
    local filename="$1"
    local size="$2"

    test "$(stat -c %s $filename)" = "$size"
}

assert_ok "Testing basic mount/unmount" << END
    set -e
    make_files 256
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"
    ${UNMOUNT} "${MOUNT_FILE}"
END

assert_ok "Testing that mount fails on nonempty file" << END
    set -e
    make_files 256
    cp "${SOURCE_FILE}" "${MOUNT_FILE}"
    ! partfs "${SOURCE_FILE}" "${MOUNT_FILE}" 1>/dev/null 2>&1
END

assert_ok "Testing -o nonempty mount option" << END
    set -e
    make_files 256
    cp "${SOURCE_FILE}" "${MOUNT_FILE}"
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o nonempty
    ${UNMOUNT} "${MOUNT_FILE}"
END

assert_ok "Testing that mount fails on a directory" << END
    set -e
    make_files 256
    rm -f "${MOUNT_FILE}"
    mkdir "${MOUNT_FILE}"
    ! partfs "${SOURCE_FILE}" "${MOUNT_FILE}" 1>/dev/null 2>&1
    rmdir "${MOUNT_FILE}"
END

assert_ok "Testing the size of a mounted file" << END
    set -e
    make_files 256

    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=5
    validate_size "${MOUNT_FILE}" 251
    ${UNMOUNT} "${MOUNT_FILE}"

    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=5,sizelimit=37
    validate_size "${MOUNT_FILE}" 37
    ${UNMOUNT} "${MOUNT_FILE}"

    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=256
    validate_size "${MOUNT_FILE}" 0
    ${UNMOUNT} "${MOUNT_FILE}"

    cleanup
END

assert_ok "Testing the that an oversized mount fails" << END
    set -e

    make_files 256
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"
    ${UNMOUNT} "${MOUNT_FILE}"

    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=256
    ${UNMOUNT} "${MOUNT_FILE}"

    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=255,sizelimit=1
    ${UNMOUNT} "${MOUNT_FILE}"

    ! partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=256,sizelimit=1 2>/dev/null
    ! partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=255,sizelimit=2 2>/dev/null
END

assert_ok "Testing a zero-length file mount" << END
    set -e

    make_files 0
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"
    ${UNMOUNT} "${MOUNT_FILE}"
    cleanup
END

assert_ok "Testing a size-0 mount" << END
    set -e

    make_files 32
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o offset=10,sizelimit=0
    validate_size "${MOUNT_FILE}" 0
    cleanup
END

assert_ok "Testing read-only mounts" << END
    set -euo pipefail

    make_files 256
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}"
    test "\$(stat -c "%a" "${MOUNT_FILE}")" = "644"

    cat "${MOUNT_FILE}" 1>/dev/null
    echo "test string" | (tee "${MOUNT_FILE}" 1>/dev/null)
    ${UNMOUNT} "${MOUNT_FILE}"
    cleanup

    make_files 256
    partfs "${SOURCE_FILE}" "${MOUNT_FILE}" -o ro
    test "\$(stat -c "%a" "${MOUNT_FILE}")" = "444"

    cat "${MOUNT_FILE}" 1>/dev/null
    echo "test string" | (! tee "${MOUNT_FILE}" 1>/dev/null 2>&1)
    ${UNMOUNT} "${MOUNT_FILE}"
    cleanup
END

assert_ok "Testing autocreate" << END
    set -euo pipefail

    make_files 16
    rm -f "${MOUNT_FILE}"

    test ! -e "${MOUNT_FILE}"
    partfs -o ro,use_ino "${SOURCE_FILE}" "${MOUNT_FILE}"

    test -e "${MOUNT_FILE}"

    SRC_INODE="\$(ls -i "${SOURCE_FILE}" | sed 's/ .*//g')"
    MOUNT_INODE="\$(ls -i "${MOUNT_FILE}" | sed 's/ .*//g')"

    test "\$SRC_INODE" = "\$MOUNT_INODE"
    test "\$SRC_INODE" != "\$"

    ${UNMOUNT} "${MOUNT_FILE}"
    test ! -e "${MOUNT_FILE}"

    cleanup
END

assert_ok "Testing offset size-suffix" << END
    set -euo pipefail

    make_files $((1024*1024*8))
    partfs -o offset=1M "${SOURCE_FILE}" "${MOUNT_FILE}"

    dd if="${SOURCE_FILE}" of="${WORK_FILE}" bs=1M skip=1 status=none
    validate_size "${MOUNT_FILE}" $((1024*1024*7))
    diff "${WORK_FILE}" "${MOUNT_FILE}"

    ${UNMOUNT} "${MOUNT_FILE}"
    rm -f "${WORK_FILE}"

    partfs -o offset=1k "${SOURCE_FILE}" "${MOUNT_FILE}"

    dd if="${SOURCE_FILE}" of="${WORK_FILE}" bs=1k skip=1 status=none
    validate_size "${MOUNT_FILE}" $((1024*1024*8 - 1024))
    diff "${WORK_FILE}" "${MOUNT_FILE}"

    cleanup

END

assert_ok "Testing sizelimit size-suffix" << END
    set -euo pipefail

    make_files $((1024*1024*8))
    partfs -o sizelimit=1M "${SOURCE_FILE}" "${MOUNT_FILE}"

    dd if="${SOURCE_FILE}" of="${WORK_FILE}" bs=1M count=1 status=none
    validate_size "${MOUNT_FILE}" $((1024*1024))
    diff "${WORK_FILE}" "${MOUNT_FILE}"

    ${UNMOUNT} "${MOUNT_FILE}"
    rm -f "${WORK_FILE}"

    partfs -o offset=1M,sizelimit=1k "${SOURCE_FILE}" "${MOUNT_FILE}"

    dd if="${SOURCE_FILE}" of="${WORK_FILE}" bs=1k skip=1024 count=1 status=none
    validate_size "${MOUNT_FILE}" 1024
    diff "${WORK_FILE}" "${MOUNT_FILE}"

    ${UNMOUNT} "${MOUNT_FILE}"
    partfs -o offset=1Mb,sizelimit=1kB "${SOURCE_FILE}" "${MOUNT_FILE}"
    validate_size "${MOUNT_FILE}" 1024
    diff "${WORK_FILE}" "${MOUNT_FILE}"

    cleanup
END
