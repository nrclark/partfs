.TH "PARTFS" 1 "@MANPAGE_DATE@" "PartFS version @PACKAGE_VERSION@"

.\"-----------------------------------------------------------------------------

.SH NAME
.B partfs
\(en Mount a region of \fISOURCE\fR as a different file at \fIMOUNTPOINT\fR.

.\"-----------------------------------------------------------------------------

.SH SYNOPSIS
.B partfs
.RB [ \-h/--help | \-V/--version ]
.LP
.PD 0
.B partfs
[-o \fBoptions\fR]
.I SOURCE
.I MOUNTPOINT
.LP

.B partfs
.I SOURCE
.I MOUNTPOINT
[-o \fBoptions\fR]
.LP
.LP
.B partfs
.I SOURCE
[-o \fBoptions\fR]
.I MOUNTPOINT
.PD

.SS Size/Offset Examples:
.PD 0
.B partfs
.I SOURCE
.I MOUNTPOINT
-o offset=\fINBYTES\fR[,\fBoptions\fR]
.LP

.B partfs
.I SOURCE
.I MOUNTPOINT
-o sizelimit=\fINBYTES\fR[,\fBoptions\fR]
.LP

.B partfs
.I SOURCE
.I MOUNTPOINT
-o offset=\fINBYTES\fR,sizelimit=\fINBYTES\fR[,\fBoptions\fR]
.PD
.LP

.SS Common FUSE Options:
.PD 0

.B partfs
.I SOURCE
.I MOUNTPOINT
-o ro (mounts as read-only)
.LP

.B partfs
.I SOURCE
.I MOUNTPOINT
-o allow_other (allows other users to access mount)
.LP

.B partfs
.I SOURCE
.I MOUNTPOINT
-o nonempty (allow mounting over a non-empty file, or over itself)
.PD
.LP

.SS Unmounting:
\fBfusermount\fR \fB-u\fR \fIMOUNTPOINT\fR

.RS -4
See \fBpartfs --help\fR for a full list of mouting options.
.RE

.\"-----------------------------------------------------------------------------

.SH DESCRIPTION

PartFS is a FUSE-based tool for accessing a chunk of a SOURCE file as if it
were a separate file at MOUNTPOINT. It's intended for use in creating/modifying
disk image files.
.LP

Say that SOURCE was a 600000-byte file with the following layout:
.LP
.PD 0
.RS 4n
[Region 1] Bytes 1 to 5000: Bootloader region
.LP
[Region 2] Bytes 5001 to 105000: System data
.LP
[Region 3] Bytes 105001 to 205000: System Partition
.LP
[Region 4] Bytes 205001 to 600000: User Data
.RE
.PD
.LP
PartFS would allow you to mount any of these regions and access them as if
they were standalone files. In the example given above, the correct mounting
parameters would be:
.LP
.PD 0
.RS 4n
partfs \fISOURCE\fR \fIMOUNTPOINT\fR -o offset=0,sizelimit=5000
.LP
partfs \fISOURCE\fR \fIMOUNTPOINT\fR -o offset=5000,sizelimit=100000
.LP
partfs \fISOURCE\fR \fIMOUNTPOINT\fR -o offset=105000,sizelimit=100000
.LP
partfs \fISOURCE\fR \fIMOUNTPOINT\fR -o offset=205000,sizelimit=395000
.RE
.PD
.LP
Note that region 1 could also be mounted with no offset because it starts at
byte 0. Similarly, Region 4 could be mounted with no size-limit because it goes
to the end of the file.
.LP

PartFS is logically similar to a loopback-mounted image under Linux. It has two
key differences though. First, it can be done as an unprivileged user. And
second, it doesn't offer direct access to any filesystems stored within the
mounted image. Consider using with fuse2fs or a similar tool for unprivileged
filesystem access.

\fIMOUNTPOINT\fR must be an empty file unless the \fBnonempty\fR option is
supplied, as described under 'General FUSE options' below.

PartFS exposes the full set of FUSE mounting options. These include \fIro\fR for
read-only mounts, \fIallow_other\fR for multi-user mounts, \fInonempty\fR for
self-mounts or mounting over non-empty files, and many more. See
\fBpartfs --help\fR for a complete list.

To unmount a PartFS file, use the \fBfusermount\fR utility.

.\"-----------------------------------------------------------------------------

.SH OPTIONS
.SS General Options
.TP
.B -h, --help
Display the help message and exit. Includes FUSE's help message.

.TP
.B -V, --version
Display the program version-number and exit.

.SS Mount Options
Like many other filesystem-mount programs, mount options can be specified in
a single argument (-o \fIOPT1,OPT2=val2,OPT3\fR) as a list of multiple
arguments (-o \fIOPT1\fR -o \fIOPT2=val2\fR -o \fIOPT3\fR), or as a mixture of
the two styles.
.LP
.RS -2n
PartFS-specific options:
.RE
.TP
.B -o offset=NBYTES
The number of bytes to skip in \fISOURCE\fR (default: 0). Byte 1 of
\fIMOUNTPOINT\fR will map to byte [\fBoffset\fR + 1] of \fISOURCE\fR, as
described in the \fBsizelimit\fR option below. \fISOURCE\fR's contents below
the offset are never modified. Can be specified with one of the following
power-of-two suffixes: \fBk\fR (2**10), \fBM\fR (2**20), \fBG\fR (2**30), or
\fBT\fR (2**40).

.TP
.B -o sizelimit=NBYTES
Starting length (and maxiumum length) of \fIMOUNTPOINT\fR in bytes. The
mapped region of \fISOURCE\fR will go from byte [\fBoffset\fR] to byte
[\fBsizelimit\fR-1], including both edges. So a mount with a 1500-byte sizelimit
will and no offset will include bytes 0-1499 (for a total length of 1500).
\fISOURCE\fR's contents above [offset + sizelimit] are never modified. Can be
specified with one of the following power-of-two suffixes: \fBk\fR (2**10),
\fBM\fR (2**20), \fBG\fR (2**30), or \fBT\fR (2**40).

.RS -2n
General FUSE options:
.RE
.LP
There are a lot of FUSE options available, all of which are provided by FUSE
instead of directly from PartFS. A complete list can be found by running
\fBpartfs --help\fR. Some of the more interesting options are documented here:

.TP
.B -o ro
Mounted file is read-only, and can't be modified by any user.

.TP
.B -o allow_root
Mounted file can be accessed by root as well as the mounter. This option and
\fBallow_other\fR are mutually exclusive.

.TP
\fB-o allow_other\fR (if enabled on your system)
Mounted file can be accessed by any user. This option and \fBallow_root\fR are
mutually exclusive.

.TP
.B -o nonempty
Allow mounting over a non-empty file. By default, FUSE will only mount to empty
files (in order to avoid hiding data). If supplied, this option will allow you
to mount on-top of any file (even including \fISOURCE\fR) if desired.

.TP
.B -f
Run in the foreground instead of starting a background process and returning.

.\"-----------------------------------------------------------------------------

.SH NOTES

PartFS is a FUSE filesystem, and will support slightly different options and
unmount procedures depending on your system's FUSE installation.

Also note that PartFS is a file-to-file mount, and doesn't give you direct
access to an image's filesystem. To edit a filesystem, a secondary mount (using
\fBfuse2fs\fR or a similar tool) is required.

.SH SEE ALSO
.SS \fRManpages:
.LP
.PD 0
.BR fuse( 4 ),
.LP
.BR fusermount( 1 ),
.LP
.BR fuse2fs( 1 ),
.LP
.BR mount.fuse( 8 ),
.LP
.PD
.SS \fRURL:
.I https://github.com/nrclark/partfs

